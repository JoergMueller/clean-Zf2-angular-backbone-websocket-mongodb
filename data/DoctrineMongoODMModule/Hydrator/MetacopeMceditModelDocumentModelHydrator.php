<?php

namespace DoctrineMongoODMModule\Hydrator;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MetacopeMceditModelDocumentModelHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['distance'])) {
            $value = $data['distance'];
            $return = (string) $value;
            $this->class->reflFields['distance']->setValue($document, $return);
            $hydratedData['distance'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['datecreate'])) {
            $value = $data['datecreate'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['datecreate']->setValue($document, clone $return);
            $hydratedData['datecreate'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['publishedOn'])) {
            $value = $data['publishedOn'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['publishedOn']->setValue($document, clone $return);
            $hydratedData['publishedOn'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['publishedOff'])) {
            $value = $data['publishedOff'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['publishedOff']->setValue($document, clone $return);
            $hydratedData['publishedOff'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['layout'])) {
            $value = $data['layout'];
            $return = $value;
            $this->class->reflFields['layout']->setValue($document, $return);
            $hydratedData['layout'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['subnavlayout'])) {
            $value = $data['subnavlayout'];
            $return = $value;
            $this->class->reflFields['subnavlayout']->setValue($document, $return);
            $hydratedData['subnavlayout'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['path'])) {
            $value = $data['path'];
            $return = $value;
            $this->class->reflFields['path']->setValue($document, $return);
            $hydratedData['path'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['structname'])) {
            $value = $data['structname'];
            $return = $value;
            $this->class->reflFields['structname']->setValue($document, $return);
            $hydratedData['structname'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['inlanguage'])) {
            $value = $data['inlanguage'];
            $return = $value;
            $this->class->reflFields['inlanguage']->setValue($document, $return);
            $hydratedData['inlanguage'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['bgimage'])) {
            $value = $data['bgimage'];
            $return = (string) $value;
            $this->class->reflFields['bgimage']->setValue($document, $return);
            $hydratedData['bgimage'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['structicon'])) {
            $value = $data['structicon'];
            $return = (string) $value;
            $this->class->reflFields['structicon']->setValue($document, $return);
            $hydratedData['structicon'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['documentclass'])) {
            $value = $data['documentclass'];
            $return = (string) $value;
            $this->class->reflFields['documentclass']->setValue($document, $return);
            $hydratedData['documentclass'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['sort'])) {
            $value = $data['sort'];
            $return = (int) $value;
            $this->class->reflFields['sort']->setValue($document, $return);
            $hydratedData['sort'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['visible'])) {
            $value = $data['visible'];
            $return = (int) $value;
            $this->class->reflFields['visible']->setValue($document, $return);
            $hydratedData['visible'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['isdocument'])) {
            $value = $data['isdocument'];
            $return = (int) $value;
            $this->class->reflFields['isdocument']->setValue($document, $return);
            $hydratedData['isdocument'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['sheet'])) {
            $embeddedDocument = $data['sheet'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['sheet'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['sheet'], $document, 'sheet');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['sheet']->setValue($document, $return);
            $hydratedData['sheet'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['coordinates'])) {
            $embeddedDocument = $data['coordinates'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['coordinates'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['coordinates'], $document, 'coordinates');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['coordinates']->setValue($document, $return);
            $hydratedData['coordinates'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['georeverse'])) {
            $value = $data['georeverse'];
            $return = (string) $value;
            $this->class->reflFields['georeverse']->setValue($document, $return);
            $hydratedData['georeverse'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['parent'])) {
            $reference = $data['parent'];
            if (isset($this->class->fieldMappings['parent']['simple']) && $this->class->fieldMappings['parent']['simple']) {
                $className = $this->class->fieldMappings['parent']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['parent'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['parent']->setValue($document, $return);
            $hydratedData['parent'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['authors']) ? $data['authors'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['authors']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['authors']->setValue($document, $return);
        $hydratedData['authors'] = $return;

        /** @ReferenceOne */
        if (isset($data['owner'])) {
            $reference = $data['owner'];
            if (isset($this->class->fieldMappings['owner']['simple']) && $this->class->fieldMappings['owner']['simple']) {
                $className = $this->class->fieldMappings['owner']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['owner'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['owner']->setValue($document, $return);
            $hydratedData['owner'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['client'])) {
            $reference = $data['client'];
            if (isset($this->class->fieldMappings['client']['simple']) && $this->class->fieldMappings['client']['simple']) {
                $className = $this->class->fieldMappings['client']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['client'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['client']->setValue($document, $return);
            $hydratedData['client'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['token'])) {
            $value = $data['token'];
            $return = (string) $value;
            $this->class->reflFields['token']->setValue($document, $return);
            $hydratedData['token'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['readPerms'])) {
            $value = $data['readPerms'];
            $return = (string) $value;
            $this->class->reflFields['readPerms']->setValue($document, $return);
            $hydratedData['readPerms'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['writePerms'])) {
            $value = $data['writePerms'];
            $return = (string) $value;
            $this->class->reflFields['writePerms']->setValue($document, $return);
            $hydratedData['writePerms'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['workflow'])) {
            $value = $data['workflow'];
            $return = $value;
            $this->class->reflFields['workflow']->setValue($document, $return);
            $hydratedData['workflow'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['editable'])) {
            $value = $data['editable'];
            $return = (bool) $value;
            $this->class->reflFields['editable']->setValue($document, $return);
            $hydratedData['editable'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['checksum'])) {
            $value = $data['checksum'];
            $return = (string) $value;
            $this->class->reflFields['checksum']->setValue($document, $return);
            $hydratedData['checksum'] = $return;
        }
        return $hydratedData;
    }
}