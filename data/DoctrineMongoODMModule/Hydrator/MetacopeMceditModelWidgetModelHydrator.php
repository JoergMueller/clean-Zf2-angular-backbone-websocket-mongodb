<?php

namespace DoctrineMongoODMModule\Hydrator;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class MetacopeMceditModelWidgetModelHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['datecreate'])) {
            $value = $data['datecreate'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['datecreate']->setValue($document, clone $return);
            $hydratedData['datecreate'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['dateupdate'])) {
            $value = $data['dateupdate'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['dateupdate']->setValue($document, clone $return);
            $hydratedData['dateupdate'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['datestart'])) {
            $value = $data['datestart'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['datestart']->setValue($document, clone $return);
            $hydratedData['datestart'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['datestop'])) {
            $value = $data['datestop'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['datestop']->setValue($document, clone $return);
            $hydratedData['datestop'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['anker'])) {
            $value = $data['anker'];
            $return = (string) $value;
            $this->class->reflFields['anker']->setValue($document, $return);
            $hydratedData['anker'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['type'])) {
            $value = $data['type'];
            $return = (string) $value;
            $this->class->reflFields['type']->setValue($document, $return);
            $hydratedData['type'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['tags'])) {
            $value = $data['tags'];
            $return = $value;
            $this->class->reflFields['tags']->setValue($document, $return);
            $hydratedData['tags'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['path'])) {
            $value = $data['path'];
            $return = $value;
            $this->class->reflFields['path']->setValue($document, $return);
            $hydratedData['path'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['attributes'])) {
            $value = $data['attributes'];
            $return = $value;
            $this->class->reflFields['attributes']->setValue($document, $return);
            $hydratedData['attributes'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['inlanguage'])) {
            $value = $data['inlanguage'];
            $return = $value;
            $this->class->reflFields['inlanguage']->setValue($document, $return);
            $hydratedData['inlanguage'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['draft'])) {
            $value = $data['draft'];
            $return = $value;
            $this->class->reflFields['draft']->setValue($document, $return);
            $hydratedData['draft'] = $return;
        }

        /** @Field(type="int") */
        if (isset($data['sort'])) {
            $value = $data['sort'];
            $return = (int) $value;
            $this->class->reflFields['sort']->setValue($document, $return);
            $hydratedData['sort'] = $return;
        }

        /** @Field(type="hash") */
        if (isset($data['editmode'])) {
            $value = $data['editmode'];
            $return = $value;
            $this->class->reflFields['editmode']->setValue($document, $return);
            $hydratedData['editmode'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['parent'])) {
            $reference = $data['parent'];
            if (isset($this->class->fieldMappings['parent']['simple']) && $this->class->fieldMappings['parent']['simple']) {
                $className = $this->class->fieldMappings['parent']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['parent'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['parent']->setValue($document, $return);
            $hydratedData['parent'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['coordinates'])) {
            $embeddedDocument = $data['coordinates'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['coordinates'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['coordinates'], $document, 'coordinates');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);

            $this->class->reflFields['coordinates']->setValue($document, $return);
            $hydratedData['coordinates'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['author'])) {
            $reference = $data['author'];
            if (isset($this->class->fieldMappings['author']['simple']) && $this->class->fieldMappings['author']['simple']) {
                $className = $this->class->fieldMappings['author']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['author'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['author']->setValue($document, $return);
            $hydratedData['author'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['georeverse'])) {
            $value = $data['georeverse'];
            $return = (string) $value;
            $this->class->reflFields['georeverse']->setValue($document, $return);
            $hydratedData['georeverse'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['likes']) ? $data['likes'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['likes']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['likes']->setValue($document, $return);
        $hydratedData['likes'] = $return;

        /** @Many */
        $mongoData = isset($data['dislikes']) ? $data['dislikes'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['dislikes']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['dislikes']->setValue($document, $return);
        $hydratedData['dislikes'] = $return;

        /** @Field(type="string") */
        if (isset($data['token'])) {
            $value = $data['token'];
            $return = (string) $value;
            $this->class->reflFields['token']->setValue($document, $return);
            $hydratedData['token'] = $return;
        }
        return $hydratedData;
    }
}